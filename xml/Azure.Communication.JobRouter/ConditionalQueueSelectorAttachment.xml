<Type Name="ConditionalQueueSelectorAttachment" FullName="Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment">
  <TypeSignature Language="C#" Value="public class ConditionalQueueSelectorAttachment : Azure.Communication.JobRouter.QueueSelectorAttachment" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConditionalQueueSelectorAttachment extends Azure.Communication.JobRouter.QueueSelectorAttachment" />
  <TypeSignature Language="DocId" Value="T:Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment" />
  <TypeSignature Language="VB.NET" Value="Public Class ConditionalQueueSelectorAttachment&#xA;Inherits QueueSelectorAttachment" />
  <TypeSignature Language="F#" Value="type ConditionalQueueSelectorAttachment = class&#xA;    inherit QueueSelectorAttachment" />
  <AssemblyInfo>
    <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.Communication.JobRouter.QueueSelectorAttachment</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> Describes a set of label selectors that will be attached if the given condition resolves to true. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConditionalQueueSelectorAttachment (Azure.Communication.JobRouter.RouterRule condition, System.Collections.Generic.IEnumerable&lt;Azure.Communication.JobRouter.QueueSelector&gt; labelSelectors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.Communication.JobRouter.RouterRule condition, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Communication.JobRouter.QueueSelector&gt; labelSelectors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment.#ctor(Azure.Communication.JobRouter.RouterRule,System.Collections.Generic.IEnumerable{Azure.Communication.JobRouter.QueueSelector})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (condition As RouterRule, labelSelectors As IEnumerable(Of QueueSelector))" />
      <MemberSignature Language="F#" Value="new Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment : Azure.Communication.JobRouter.RouterRule * seq&lt;Azure.Communication.JobRouter.QueueSelector&gt; -&gt; Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment" Usage="new Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment (condition, labelSelectors)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="condition" Type="Azure.Communication.JobRouter.RouterRule" />
        <Parameter Name="labelSelectors" Type="System.Collections.Generic.IEnumerable&lt;Azure.Communication.JobRouter.QueueSelector&gt;" />
      </Parameters>
      <Docs>
        <param name="condition">
            A rule of one of the following types:
                        
            StaticRule:  A rule providing static rules that always return the same result, regardless of input.
            DirectMapRule:  A rule that return the same labels as the input labels.
            ExpressionRule: A rule providing inline expression rules.
            AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
            Please note <see cref="T:Azure.Communication.JobRouter.RouterRule" /> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
            The available derived classes include <see cref="T:Azure.Communication.JobRouter.FunctionRule" />, <see cref="T:Azure.Communication.JobRouter.DirectMapRule" />, <see cref="T:Azure.Communication.JobRouter.ExpressionRule" /> and <see cref="T:Azure.Communication.JobRouter.StaticRule" />.
            </param>
        <param name="labelSelectors"> The label selectors to attach. </param>
        <summary> Initializes a new instance of ConditionalQueueSelectorAttachment. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="condition" /> or <paramref name="labelSelectors" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public Azure.Communication.JobRouter.RouterRule Condition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Communication.JobRouter.RouterRule Condition" />
      <MemberSignature Language="DocId" Value="P:Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment.Condition" />
      <MemberSignature Language="VB.NET" Value="Public Property Condition As RouterRule" />
      <MemberSignature Language="F#" Value="member this.Condition : Azure.Communication.JobRouter.RouterRule with get, set" Usage="Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment.Condition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Communication.JobRouter.RouterRule</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A rule of one of the following types:
                        
            StaticRule:  A rule providing static rules that always return the same result, regardless of input.
            DirectMapRule:  A rule that return the same labels as the input labels.
            ExpressionRule: A rule providing inline expression rules.
            AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
            Please note <see cref="T:Azure.Communication.JobRouter.RouterRule" /> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
            The available derived classes include <see cref="T:Azure.Communication.JobRouter.FunctionRule" />, <see cref="T:Azure.Communication.JobRouter.DirectMapRule" />, <see cref="T:Azure.Communication.JobRouter.ExpressionRule" /> and <see cref="T:Azure.Communication.JobRouter.StaticRule" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LabelSelectors">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Azure.Communication.JobRouter.QueueSelector&gt; LabelSelectors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Azure.Communication.JobRouter.QueueSelector&gt; LabelSelectors" />
      <MemberSignature Language="DocId" Value="P:Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment.LabelSelectors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LabelSelectors As IList(Of QueueSelector)" />
      <MemberSignature Language="F#" Value="member this.LabelSelectors : System.Collections.Generic.IList&lt;Azure.Communication.JobRouter.QueueSelector&gt;" Usage="Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment.LabelSelectors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Azure.Communication.JobRouter.QueueSelector&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The label selectors to attach. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
